{"version":3,"sources":["utils/api.js","utils/auth.js","contexts/CurrentUserContext.js","images/Mesto-logo.svg","components/MobileNavBar.js","components/DesktopNavBar.js","components/ExpandedNavBar.js","components/HeaderContent.js","components/Header.js","components/Card.js","components/Main.js","components/Footer.js","components/Popup.js","components/ImagePopup.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/PopupConfirmDeletion.js","components/PageWithForm.js","components/Login.js","components/Register.js","components/InfoTooltip.js","components/ProtectedRoute.js","components/Spinner.js","components/App.js","reportWebVitals.js","index.js"],"names":["api","serverUrl","cohort","token","this","_serverUrl","_cohort","_token","response","ok","json","Promise","reject","status","fetch","headers","authorization","then","_checkResponse","name","about","method","body","JSON","stringify","link","cardId","_id","avatar","cardID","like","BASE_URL","checkResponse","CurrentUserContext","React","createContext","MobileNavBar","expandNavBar","useState","menuButton","setMenuButton","className","onClick","aria-label","type","DesktopNavBar","onSignOut","email","ExpandedNavBar","HeaderContent","location","useLocation","isMobile","useMediaQuery","query","isDesktop","isExpandedNavBar","setIsExpandedNavBar","useEffect","src","logoPath","alt","pathname","to","Header","Card","card","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","owner","isLiked","likes","some","item","length","Main","cards","onEditProfile","onAddPlace","onEditAvatar","style","backgroundImage","map","Footer","Date","getFullYear","Popup","isOpen","onClose","children","togglePopupState","handleEscapeClose","evt","key","document","addEventListener","removeEventListener","target","currentTarget","ImagePopup","PopupWithForm","title","submitText","onSubmit","submitButtonState","theme","noValidate","autoComplete","disabled","value","EditProfilePopup","onUpdateUser","isSubmitting","valid","errorMessage","signing","input","setInput","submitButtonText","inputNameErrorClass","inputNameErrorCaption","nameErrorMessage","inputSigningErrorClass","inputSigningErrorCaption","signingErrorMessage","handleUserInput","validity","validationMessage","prevState","preventDefault","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","inputLink","setInputLink","inputLinkErrorClass","inputLinkErrorCaption","AddPlacePopup","inputTextErrorClass","inputTextErrorCaption","textErrorMessage","linkErrorMessage","PopupConfirmDeletion","handleCardDelete","cardForDeletion","PageWithForm","isRegister","Login","onLogin","serverRequestStatus","password","inputEmailErrorClass","inputEmailErrorCaption","emailErrorMessage","inputPasswordErrorClass","inputPasswordErrorCaption","passwordErrorMessage","handleLoginInput","Register","onRegister","InfoTooltip","popupStatusMessage","history","useHistory","checkout","errorType","image","push","errorText","ProtectedRoute","Component","component","props","loggedIn","Spinner","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditProfilePopupOpen","setIsEditProfilePopupOpen","setCardForDeletion","selectedCard","setSelectedCard","setIsLoggedIn","setEmail","setCurrentUser","isUserDataReceived","setIsUserDataReceived","setCards","setIsSubmitting","isStatusPopupOpen","setIsStatusPopupOpen","errorStatus","message","setPopupStatusMessage","closeAllPopups","setErrorMessage","errorTexts","other","serverError","checkToken","jwt","localStorage","getItem","res","data","catch","err","all","getUserInfo","getCards","userData","cardData","Provider","removeItem","path","auth","finally","setItem","state","activatedCard","changeLikeCardStatus","updatedCard","c","newUserData","sendUserInfo","newUserDataFromServer","newUrl","sendUserAvatar","newCardData","sendNewCard","newCardFromServer","deleteCard","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d922d99f.chunk.js","sourcesContent":["class Api {\n  constructor({ serverUrl, cohort, token, }) {\n    this._serverUrl = serverUrl; // https://mesto.nomoreparties.co/v1\n    //this._requestPath = requestPath; // меняется постоянно напр: users/me\n    this._cohort = cohort; // cohort-22\n    this._token = token; // a039ff03-9c34-4fce-91e0-77cd409474e3\n  }\n  ////метод для единого вызова методов серверных запросов\n  //getPromiseAll(...requests) {\n  //  const promises = [...requests]\n  //  //console.log(\"Promise.all - массив изначальный\",promises);\n  //  return Promise.all(promises)\n  //}\n  //проверка метода\n  _checkResponse(response) {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Ошибка ${response.status}`)\n  }\n  //запрос информации профиля с сервера\n  getUserInfo() {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //запрос карточек с сервера\n  getCards() {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //отправка на сервер новых данных пользователя\n  //Метод PATCH обычно используют для обновления сущностей, уже существующих на сервере\n  sendUserInfo({ name, about }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  sendNewCard({ name, link }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name, //название карточки\n        link: link //ссылка на картинку\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  deleteCard(cardId) {\n    //{ name, link },\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        //name: name, //название карточки\n        //link: link, //ссылка на картинку\n        _id: cardId\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  //Обновление аватара пользователя\n  sendUserAvatar({ avatar }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/likes/${cardID}`, {\n      method: like ? 'PUT' : 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardID: cardID,\n        like: like\n      })\n    })\n      .then(this._checkResponse)\n  }\n\n}\n\nconst api = new Api({\n  serverUrl: 'https://mesto.nomoreparties.co/v1',\n  cohort: 'cohort-24',\n  token: 'edb7481a-fcf7-4397-94a7-daeb2327e95b'\n})\n\nexport default api;\n","export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst checkResponse = (response) => response.ok ? response.json() : Promise.reject(response)\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  })\n    .then(checkResponse);\n}\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  })\n    .then(checkResponse)\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Authorization\": `Bearer ${token}`\n    }\n  })\n    .then(checkResponse)\n}\n","import React from 'react';\n\nconst CurrentUserContext = React.createContext();\n\nexport default CurrentUserContext;\n","export default __webpack_public_path__ + \"static/media/Mesto-logo.5f3664ca.svg\";","import React from 'react';\n\nfunction MobileNavBar({ expandNavBar }) {\n  const [menuButton, setMenuButton] = React.useState(false);\n\n  function openMenu() {\n    setMenuButton(true)\n    expandNavBar(true)\n\n  }\n  function closeMenu() {\n\n    setMenuButton(false)\n    expandNavBar(false)\n  }\n\n  return (\n    !menuButton ? (\n      <>\n        <div className=\"page__button header__button\" onClick={openMenu}>\n          <div className='header__button header__button_burger'></div>\n          <div className='header__button header__button_burger'></div>\n          <div className='header__button header__button_burger'></div>\n        </div>\n      </>\n    ) : (\n      <>\n        <button className=\"page__button page__button_type_close\" onClick={closeMenu} aria-label=\"Кнопка Закрыть меню\" type=\"button\"></button>\n      </>\n    )\n  );\n}\n\nexport default MobileNavBar;\n","import React from 'react';\n\nfunction DesktopNavBar({ onSignOut, email }) {\n  return (\n    <>\n      <p className=\"header__email\">{email}</p>\n      <button className=\"header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n    </>\n  );\n}\n\nexport default DesktopNavBar;\n","import React from 'react';\n\nfunction ExpandedNavBar({ onSignOut, email }) {\n  return (\n    <div className={`header__expanded-nav-bar`}>\n      <p className=\"header__email\">{email}</p>\n      <button className=\"header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n    </div>\n  );\n}\n\nexport default ExpandedNavBar;\n\n\n","import React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport logoPath from '../images/Mesto-logo.svg';\nimport MobileNavBar from './MobileNavBar';\nimport DesktopNavBar from './DesktopNavBar';\nimport ExpandedNavBar from './ExpandedNavBar';\n\nfunction HeaderContent({ onSignOut, email }) {\n  const location = useLocation();\n  const isMobile = useMediaQuery({ query: '(max-width: 480px)' })\n  const isDesktop = useMediaQuery({ query: '(min-width: 481px)' })\n\n  const [isExpandedNavBar, setIsExpandedNavBar] = React.useState(false);\n\n  //если разрешение десктопное или перешли на другую страницу, то автоматически скрываем меню\n  React.useEffect(() => {\n    setIsExpandedNavBar(false);\n  }, [isDesktop, location])\n\n  //в зависимости от текущей страницы и статуса логина отображаем нужные поля\n  return (\n    <div className=\"header__content\" >\n      {isExpandedNavBar &&\n        <ExpandedNavBar\n          onSignOut={onSignOut}\n          email={email} />\n      }\n      <div className=\"header__main page__animation\">\n        <img className=\"logo\" src={logoPath} alt=\"логотип Место\" />\n        <nav className=\"header__nav-bar\">\n          {\n            (location.pathname === '/' && (\n              (isMobile && <MobileNavBar expandNavBar={setIsExpandedNavBar} />) ||\n              (isDesktop && <DesktopNavBar onSignOut={onSignOut} email={email} />)\n            )) ||\n            (location.pathname === '/sign-in' && <NavLink className=\"header__button page__button\" to=\"/sign-up\">Регистрация</NavLink>)\n            ||\n            (location.pathname === '/sign-up' && <NavLink className=\"header__button page__button\" to=\"/sign-in\">Войти</NavLink>)\n          }\n        </nav>\n      </div >\n    </div >\n  );\n}\n\nexport default HeaderContent;\n\n/*\n\n(location.pathname === '/' && (\n          isMobile && (\n            !menuButton ? (\n              <>\n                <div className=\"page__button header__button\" onClick={openMenu}>\n                  <div className='header__button header__button_burger'></div>\n                  <div className='header__button header__button_burger'></div>\n                  <div className='header__button header__button_burger'></div>\n                </div>\n              </>\n            ) : (\n              <button className=\"page__button page__button_type_close\" onClick={closeMenu} aria-label=\"Кнопка Закрыть меню\" type=\"button\"></button>\n            )\n          ),\n          isDesktop && (\n            <>\n              <p className=\"header__email\">{email}</p>\n              <button className=\"header__link header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n            </>\n          )\n        ))\n\n\n<div className=\"header__link header__button page__button\" onClick={handleMobileButton}>\n              <div className='header__button_burger'></div>\n              <div className='header__button_burger'></div>\n              <div className='header__button_burger'></div>\n            </div>\n\n(location.pathname === '/' &&\n          <>\n            <p className=\"header__email\">{email}</p>\n            <button className=\"header__link header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n          </>\n        ) ||\n\n\n{!loggedIn? (\n            //в зависимости от текущей страницы отображаем нужную ссылку\n            location.pathname === '/sign-in' && <NavLink className=\"header__link page__button\" to=\"/sign-up\">Регистрация</NavLink> ||\n            location.pathname === '/sign-up' && <NavLink className=\"header__link page__button\" to=\"/sign-in\">Войти</NavLink>\n\n        ):(\n          <>\n              <p className=\"header__email\">{email}</p>\n              <button className=\"header__link header__button page__button\" onClick={signOut}>Выйти</button>\n          </>\n        )}\n*/\n","import React from 'react';\nimport HeaderContent from './HeaderContent';\n\n\nfunction Header({ onSignOut, email }) {\n  return (\n    <header className=\"header page__section page__animation\">\n      <HeaderContent\n        onSignOut={onSignOut}\n        email={email} />\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nfunction Card({ card, onCardClick, onCardLike, onCardDelete }) {\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //проверяем, наша ли карточка. нужен для добавнения кнопки удаления\n  const isOwn = card.owner._id === currentUser._id;\n\n  function handleClick() {\n    onCardClick(card);\n  }\n  function handleLikeClick() {\n    onCardLike(card);\n  }\n  function handleDeleteClick() {\n    onCardDelete(card);\n  }\n\n  // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n  const isLiked = card.likes.some(item => {\n    return item._id === currentUser._id;\n  });\n\n  // Создаём переменную, которую после зададим в `className` для кнопки лайка\n  const cardLikeButtonClassName = `button-like_active`;\n\n  return (\n    <figure className=\"element\">\n      <img className=\"element__image\" src={card.link} alt={card.name} onClick={handleClick} />\n      {isOwn && (\n        <button className=\"element__button-delete page__button\" type=\"button\" aria-label=\"Удалить карточку\" onClick={handleDeleteClick} />\n      )}\n      <figcaption className=\"element__figcaption\">\n        <h2 className=\"element__card-title\">\n          {card.name}\n        </h2>\n        <div className=\"element__like-section\">\n          <button className={`element__button-like page__button ${isLiked ? (cardLikeButtonClassName) : ('')}`} type=\"button\" onClick={handleLikeClick} />\n          <p className=\"element__like-counter\">\n            {card.likes.length}\n          </p>\n        </div>\n      </figcaption>\n    </figure>\n  )\n}\n\nexport default Card;\n\n\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\nimport Card from './Card';\n\nfunction Main({ cards, onEditProfile, onAddPlace, onEditAvatar, onCardClick, onCardLike, onCardDelete }) {\n  //подписка на контекст\n  const { name, about, avatar } = React.useContext(CurrentUserContext);\n\n  return (\n    <main className=\"content page__block-alignment page__main\">\n      <section className=\"profile page__section page__animation page__profile\">\n        <div className=\"profile__avatar avatar-form-open-button\" style={{ backgroundImage: `url(${avatar})` }} onClick={onEditAvatar} />\n        <div className=\"profile__info\">\n          <h1 className=\"profile__title\">\n            {name}\n          </h1>\n          <button className=\"profile__change-button page__button profile-form-open-button\" onClick={onEditProfile} type=\"button\" aria-label=\"Кнопка Редактировать профиль\" />\n          <p className=\"profile__subtitle\">\n            {about || ''}\n          </p>\n        </div>\n        <button className=\"profile__add-button page__button add-card-form-open-button\" onClick={onAddPlace} type=\"button\" aria-label=\"Кнопка Добавить карточку\" />\n      </section>\n      <section className=\"elements page__section page__animation\">\n        {cards.map((card) => (\n          <Card key={card._id} card={card} onCardClick={onCardClick} onCardLike={onCardLike} onCardDelete={onCardDelete} />\n        )\n        )}\n      </section>\n    </main>\n  )\n}\nexport default Main;\n\n/*\n{cards.map(({ _id, ...card }) => (\n        <Card key={_id} card={card} onCardClick={onCardClick} onCardLike={handleCardLike} onCardDelete={handleCardDelete} />\n        )\n      )}\n*/\n","import React from 'react';\n\nfunction Footer() {\n  return(\n    <footer className=\"footer page__section page__animation\">\n      <p className=\"footer__copyright\">\n        © {new Date().getFullYear()} Mesto Russia\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction Popup({ name, isOpen, onClose, children }) {\n  const togglePopupState = isOpen ? 'popup__flexed popup_opened' : 'popup__flexed';\n\n  //закрытие по крестику, по клику вне формы\n  function handleOverlayClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n  function handleButtonClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n\n  //закрытие по Esc попапов\n  React.useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeClose = (evt) => {\n      if (evt.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keyup', handleEscapeClose);\n    return () => {\n      document.removeEventListener('keyup', handleEscapeClose);\n    }\n  }, [isOpen, onClose]);\n\n\n  return (\n    <div className={`popup popup_${name} ${togglePopupState}`} onClick={handleOverlayClose}>\n      <div className={`popup__container popup__container_${name}`}>\n        <button className={`page__button page__button_type_close popup__button-close`} onClick={handleButtonClose} aria-label=\"Кнопка Закрыть\" type=\"button\" />\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import React from 'react';\nimport Popup from './Popup';\n\nfunction ImagePopup({ card, onClose }) {\n\n  return (\n    <Popup\n      name='open-image'\n      isOpen={card}\n      onClose={onClose}>\n      <figure className=\"popup__figure\">\n        <img className=\"popup__image\" src={card ? card.link : ''} alt={card ? `картинка: ${card.name}` : ''} />\n        <figcaption className=\"popup__figcaption\">\n          {card ? card.name : ''}\n        </figcaption>\n      </figure>\n    </Popup>\n  )\n}\nexport default ImagePopup;\n","import React from 'react';\nimport Popup from './Popup';\n\nfunction PopupWithForm({ name, title, submitText, isOpen, onClose, onSubmit, submitButtonState, theme, children }) {\n\n  return (\n    <Popup\n      name={name}\n      isOpen={isOpen}\n      onClose={onClose}>\n      <form className={`form form_theme_${theme}`} onSubmit={onSubmit} name={`${name}-form`} noValidate autoComplete=\"off\">\n        <h2 className=\"form__heading\">\n          {title}\n        </h2>\n        {children}\n        <button className={`page__button form__button-save form__button-save_theme_${theme}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n          {submitText}\n        </button>\n      </form>\n    </Popup>\n  )\n}\n\nexport default PopupWithForm;\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser, isSubmitting }) {\n\n  const theme = 'white';\n\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //стейт-переменная для управляемых компонентов формы\n  const [input, setInput] = React.useState({\n    name: {\n      value: '',\n      valid: true,\n      errorMessage: ''\n    },\n    signing: {\n      value: '',\n      valid: true,\n      errorMessage: ''\n    }\n  });\n\n  const submitButtonState = !input.name.valid || !input.signing.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputNameErrorClass = input.name.errorMessage ? 'form__input_error' : '';\n  const inputNameErrorCaption = input.name.errorMessage ? 'form__input-error_active' : '';\n  const nameErrorMessage = input.name.errorMessage;\n\n  const inputSigningErrorClass = input.signing.errorMessage ? 'form__input_error' : '';\n  const inputSigningErrorCaption = input.signing.errorMessage ? 'form__input-error_active' : '';\n  const signingErrorMessage = input.signing.errorMessage;\n\n  // После загрузки текущего пользователя из API\n  // его данные будут использованы в управляемых компонентах.\n  React.useEffect(() => {\n    // if нужен для того, чтобы данные в инпутах сбрасывались в изначальное состояние только при открытии формы. так красивее\n    if (isOpen) {\n      setInput(prevState => ({\n        ...prevState,\n        name: {\n          value: currentUser.name,\n          valid: true,\n          errorMessage: ''\n        },\n        signing: {\n          value: currentUser.about,\n          valid: true,\n          errorMessage: ''\n        }\n      })\n      );\n    }\n  }, [currentUser, isOpen]);\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём значения управляемых компонентов во внешний обработчик\n    onUpdateUser({\n      name: input.name.value,\n      about: input.signing.value,\n    });\n  }\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    }))\n  }\n\n  return (\n    <PopupWithForm\n      name=\"change-profile\"\n      title=\"Редактировать профиль\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      theme={theme}>\n      <fieldset className=\"form__profile-information\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputNameErrorClass}`} value={input.name ? input.name.value : ''} onChange={handleUserInput} type=\"text\" name=\"name\" placeholder=\"Имя\" required minLength={2} maxLength={40} />\n          <span className={`form__input-error ${inputNameErrorCaption}`}>\n            {nameErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputSigningErrorClass}`} value={input.signing ? input.signing.value : ''} onChange={handleUserInput} type=\"text\" name=\"signing\" placeholder=\"Подпись\" required minLength={2} maxLength={200} />\n          <span className={`form__input-error ${inputSigningErrorCaption}`}>\n            {signingErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n\n}\n\nexport default EditProfilePopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar, isSubmitting }) {\n\n  const theme = 'white';\n\n  const [inputLink, setInputLink] = React.useState({});\n\n  const submitButtonState = !inputLink.value || !inputLink.value || !inputLink.valid || !inputLink.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputLinkErrorClass = inputLink.errorMessage ? 'form__input_error' : '';\n  const inputLinkErrorCaption = inputLink.errorMessage ? 'form__input-error_active' : '';\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём новый url во внешний обработчик\n    onUpdateAvatar({\n      avatar: inputLink.value\n    });\n  }\n\n  React.useEffect(() => {\n    // if нужен для того, чтобы данные в инпутах сбрасывались в изначальное состояние только при открытии формы. так красивее\n    if (isOpen) {\n      setInputLink({\n        value: '',\n        valid: true,\n        errorMessage: ''\n      })\n    }\n  }, [isOpen]);\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { value, validity: { valid }, validationMessage } = target;\n\n    setInputLink({\n      value,\n      valid,\n      errorMessage: validationMessage\n    })\n  }\n\n  return (\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Обновить аватар\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      theme={theme}>\n      <fieldset className=\"form__profile-information\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputLinkErrorClass}`} value={inputLink.value || ''} onChange={handleUserInput} type=\"url\" name=\"image-link\" placeholder=\"Ссылка на картинку\" required />\n          <span className={`form__input-error ${inputLinkErrorCaption}`}>\n            {inputLink.errorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n\n  )\n}\n\nexport default EditAvatarPopup;\n\n/*\n//валидация инпутов\n  function handleChange(evt){\n    setLink(evt.target.value)\n\n    //вызов валидации\n    handleCheckInputValidity(evt.target);\n  }\n  const [link, setLink] = React.useState('');\n  const [isValidInput, setIsValidInput] = React.useState({\n    name: '',\n    status: ''\n  });\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [submitButton, setSubmitButton] = React.useState('');\n  const toggleInput = isValidInput.status ? ('popup__input_error'):('');\n  const toggleError = isValidInput.status ? ('popup__input-error_active'):('');\n  const toggleMessage = isValidInput.status && errorMessage;\n\n  //проверка валидности\n  function handleCheckInputValidity(input) {\n    if (!input.validity.valid) {\n      //если валидный\n      setIsValidInput({\n        name: input.name,\n        status: true\n      });\n      setErrorMessage(input.validationMessage);\n      setSubmitButton(true)\n    } else {\n      //если невалидный\n      setIsValidInput({\n        name: input.name,\n        status: false\n      });\n      setErrorMessage('');\n      setSubmitButton(false)\n    }\n  }\n  //сброс ошибок при закрытии поля\n  function resetValidation() {\n    setIsValidInput({\n      name: '',\n      status: true\n    });\n    setErrorMessage('');\n  }\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace, isSubmitting }) {\n\n  const theme = 'white';\n\n  const [input, setInput] = React.useState({\n    location: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    },\n    link: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    }\n  });\n\n  const submitButtonState = !input.location.valid || !input.link.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Добавление...';\n\n  const inputTextErrorClass = input.location.errorMessage ? 'form__input_error' : '';\n  const inputTextErrorCaption = input.location.errorMessage ? 'form__input-error_active' : '';\n  const textErrorMessage = input.location.errorMessage;\n\n  const inputLinkErrorClass = input.link.errorMessage ? 'form__input_error' : '';\n  const inputLinkErrorCaption = input.link.errorMessage ? 'form__input-error_active' : '';\n  const linkErrorMessage = input.link.errorMessage;\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    }))\n  }\n\n  //обработчик формы\n  function handleAddPlaceSubmit(evt) {\n    evt.preventDefault();\n\n    onAddPlace({\n      name: input.location.value,\n      link: input.link.value\n    })\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля при закрытии формы\n    if (isOpen) {\n      setInput({\n        location: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        },\n        link: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        }\n      });\n    }\n  }, [isOpen]);\n\n  return (\n    <PopupWithForm\n      name=\"add-card\"\n      title=\"Новое место\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleAddPlaceSubmit}\n      submitButtonState={submitButtonState}\n      theme={theme}>\n      <fieldset className=\"form__profile-information\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputTextErrorClass}`} value={input.location ? input.location.value : ''} onChange={handleUserInput} type=\"text\" name=\"location\" placeholder=\"Название\" required minLength={2} maxLength={30} />\n          <span className={`form__input-error ${inputTextErrorCaption}`}>\n            {textErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputLinkErrorClass}`} value={input.link ? input.link.value : ''} onChange={handleUserInput} type=\"url\" name=\"link\" placeholder=\"Ссылка на картинку\" required />\n          <span className={`form__input-error ${inputLinkErrorCaption}`}>\n            {linkErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n}\n\nexport default AddPlacePopup;\n\n/*\n//для сброса значений при закрытии формы. Зависимость от defaultForm\n  // потому что если от isOpen, я не могу добавить карточку. Данные стейтов очищаются раньше, чем отправка происходит\n  //приходится 2 раза сбрасывать\n  //стейт для сброса полей формы к начальному состоянию\n  const [defaultForm, setDefaultForm] = React.useState(false);\n  //React.useEffect(()=> {\n  //  setInputText('')\n  //  setInputLink('')\n  //  setDefaultForm(false)\n  //},[defaultForm]);\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction PopupConfirmDeletion({ onClose, handleCardDelete, cardForDeletion, isSubmitting }) {\n\n  const theme = 'white';\n\n  const submitButtonText = isSubmitting ? 'Да' : 'Удаление...';\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    handleCardDelete(cardForDeletion)\n  }\n  return (\n    <PopupWithForm\n      name=\"confirm-deletion\"\n      title=\"Вы уверены?\"\n      submitText={submitButtonText}\n      isOpen={cardForDeletion} //целый объект перекидываю для true/false результата/ работает но мб память лишнюю жрет такой способ\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={cardForDeletion}\n      theme={theme} />\n  )\n}\n\nexport default PopupConfirmDeletion;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction PageWithForm({ name, title, submitText, onSubmit, submitButtonState, isRegister, theme, children }) {\n\n  return (\n    <div className='page-with-form page__block-alignment page__animation'>\n      <div className={`page-with-form__container page-with-form__container_${name}`}>\n        <form className={`form form_theme_${theme}`} onSubmit={onSubmit} name={`${name}-form`} noValidate autoComplete=\"off\">\n          <h2 className=\"form__heading form__heading_style\">\n            {title}\n          </h2>\n          {children}\n          <button className={`page__button form__button-save form__button-save_margin form__button-save_theme_${theme}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n            {submitText}\n          </button>\n          {isRegister && (\n            <p className='form__redirection'>Уже зарегистрированы?\n              <Link to=\"/sign-in\" className=\"form__link page__button\">Войти</Link>\n            </p>\n          )}\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default PageWithForm;\n","import React from 'react';\nimport PageWithForm from './PageWithForm';\n\nfunction Login({ onLogin, isSubmitting, serverRequestStatus }) {\n  const [input, setInput] = React.useState({\n    email: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    },\n    password: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    }\n  });\n\n  const theme = 'dark';\n\n  const submitButtonState = !input.email.valid || !input.password.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Войти' : 'Вход...';\n\n  const inputEmailErrorClass = input.email.errorMessage ? 'form__input_error' : '';\n  const inputEmailErrorCaption = input.email.errorMessage ? 'form__input-error_active' : '';\n  const emailErrorMessage = input.email.errorMessage;\n\n  const inputPasswordErrorClass = input.password.errorMessage ? 'form__input_error' : '';\n  const inputPasswordErrorCaption = input.password.errorMessage ? 'form__input-error_active' : '';\n  const passwordErrorMessage = input.password.errorMessage;\n\n  //обработчик инпутов\n  function handleLoginInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    })\n    )\n  }\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!input.email.value || !input.password.value) {\n      return\n    }\n\n    onLogin(input.email.value, input.password.value)\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля после отправки формы\n    //if нужен для того, чтобы поля очищались только при успешном ответе сервера\n    if (serverRequestStatus === 'success') {\n      setInput({\n        email: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        },\n        password: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        }\n      });\n    }\n  }, [serverRequestStatus]);\n\n  return (\n    <PageWithForm\n      name=\"login\"\n      title=\"Вход\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={false}\n      theme={theme}>\n      <fieldset className=\"form__profile-information form__profile-information_margin\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputEmailErrorClass}`} value={input.email ? input.email.value : ''} onChange={handleLoginInput} type=\"email\" name=\"email\" placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`form__input-error ${inputEmailErrorCaption}`}>\n            {emailErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputPasswordErrorClass}`} value={input.password ? input.password.value : ''} onChange={handleLoginInput} type=\"password\" name=\"password\" placeholder=\"Пароль\" required minLength={6} />\n          <span className={`form__input-error ${inputPasswordErrorCaption}`}>\n            {passwordErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PageWithForm>\n  )\n}\n\nexport default Login;\n","import React from 'react';\nimport PageWithForm from './PageWithForm';\n\nfunction Register({ onRegister, isSubmitting, serverRequestStatus }) {\n  const [input, setInput] = React.useState({\n    email: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    },\n    password: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    }\n  });\n\n  const theme = 'dark';\n\n  const submitButtonState = !input.email.valid || !input.password.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Зарегистрироваться' : 'Регистрация...';\n\n  const inputEmailErrorClass = input.email.errorMessage ? 'form__input_error' : '';\n  const inputEmailErrorCaption = input.email.errorMessage ? 'form__input-error_active' : '';\n  const emailErrorMessage = input.email.errorMessage;\n\n  const inputPasswordErrorClass = input.password.errorMessage ? 'form__input_error' : '';\n  const inputPasswordErrorCaption = input.password.errorMessage ? 'form__input-error_active' : '';\n  const passwordErrorMessage = input.password.errorMessage;\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    })\n    )\n  }\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!input.email.value || !input.password.value) {\n      return\n    }\n\n    onRegister(input.email.value, input.password.value)\n\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля после отправки формы\n    //if нужен для того, чтобы поля очищались только при успешном ответе сервера\n    if (serverRequestStatus === 'success') {\n      setInput({\n        email: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        },\n        password: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        }\n      });\n    }\n  }, [serverRequestStatus]);\n\n  return (\n    <PageWithForm\n      name=\"register\"\n      title=\"Регистрация\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={true}\n      theme={theme}>\n      <fieldset className=\"form__profile-information form__profile-information_margin\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputEmailErrorClass}`} value={input.email ? input.email.value : ''} onChange={handleUserInput} type=\"email\" name=\"email\" placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`form__input-error ${inputEmailErrorCaption}`}>\n            {emailErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputPasswordErrorClass}`} value={input.password ? input.password.value : ''} onChange={handleUserInput} type=\"password\" name=\"password\" placeholder=\"Пароль\" required minLength={6} />\n          <span className={`form__input-error ${inputPasswordErrorCaption}`}>\n            {passwordErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PageWithForm>\n  )\n}\n\nexport default Register;\n\n\n\n/*\n<PopupWithForm\n        name=\"add-card\"\n        title=\"Новое место\"\n        submitText={submitButtonText}\n        isOpen={isOpen}\n        onClose={onClose}\n        onSubmit={handleAddPlaceSubmit}\n        submitButtonState={submitButtonState}>\n\n        </PopupWithForm>\n*/\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Popup from './Popup';\n\nfunction InfoTooltip({ isOpen, onClose, popupStatusMessage }) {\n\n  //const theme = 'dark';\n\n  const history = useHistory();\n  const checkout = popupStatusMessage.errorType === 'success'\n  const image = checkout ? 'popup__image-status_type_success' : 'popup__image-status_type_reject'\n  function handleClose() {\n    onClose()\n    //редиректим хуком на страницу логина при успешной регистрации\n    checkout && history.push('/sign-in')\n  }\n  return (\n    <Popup\n      name=\"status\"\n      isOpen={isOpen}\n      onClose={handleClose}>\n      <div className=\"popup__status\">\n        <div className={`popup__image-status ${image}`}></div>\n        <h2 className=\"popup__heading popup__heading_status\">\n          {popupStatusMessage.errorText}\n        </h2>\n      </div>\n    </Popup>\n  )\n}\n\nexport default InfoTooltip;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n  return (\n    <Route>\n      {\n        () => {\n          return props.loggedIn ? (<Component {...props} />) : (<Redirect to='./sign-in' />)\n        }\n      }\n    </Route>\n  )\n}\n\nexport default ProtectedRoute;\n\n\n// const ProtectedRoute = ({ component: Component, ...props }) => {\n//   return (\n//     <Route>\n//       {\n//         () => {\n//           //при ожидании ответа от сервера при получении данных пользователя и карточек показываем спиннер ожидания\n//           return props.loggedIn ? (\n//             props.isUserDataReceived ? (<Component {...props} />\n//             ) : (<Spinner />)\n//           ) : (<Redirect to='/sign-in' />)\n//         }\n//       }\n//     </Route>\n//   )\n// }\n\n// export default ProtectedRoute;\n\n","import React from 'react';\n\nfunction Spinner() {\n  return (\n    <div className=\"spinner page__section\">\n      <div className='spinner__body'></div>\n    </div>\n  )\n}\n\nexport default Spinner;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport api from '../utils/api';\nimport * as auth from '../utils/auth';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport PopupConfirmDeletion from './PopupConfirmDeletion';\nimport Login from './Login';\nimport Register from './Register';\nimport InfoTooltip from './InfoTooltip';\nimport ProtectedRoute from './ProtectedRoute';\nimport Spinner from './Spinner';\n\nfunction App() {\n\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [cardForDeletion, setCardForDeletion] = React.useState(null);\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  const [loggedIn, setIsLoggedIn] = React.useState(false);\n  const [email, setEmail] = React.useState('');\n  const history = useHistory();\n  //стейт для юзеринфо\n  const [currentUser, setCurrentUser] = React.useState({\n    name: '',\n    about: '',\n    avatar: ''\n  });\n  //проверяем статус получения данных. Если false, не рендерим Main и Footer\n  const [isUserDataReceived, setIsUserDataReceived] = React.useState(false);\n  //стейт для карточек\n  const [cards, setCards] = React.useState([]);\n  // submit status\n  const [isSubmitting, setIsSubmitting] = React.useState(true);\n  const [isStatusPopupOpen, setIsStatusPopupOpen] = React.useState(false);\n  const [popupStatusMessage, setPopupStatusMessage] = React.useState({\n    errorStatus: null,\n    message: '',\n  });\n\n  //колбэк - закрытия попапов с формой\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  function handleCardClick(state) {\n    setSelectedCard(state);\n  }\n  //закрытие попапа\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n    setCardForDeletion(null);\n    setIsStatusPopupOpen(false);\n    // setTimeout(setPopupStatusMessage({\n    //   errorStatus: null,\n    //   message: '',\n    // }), 1000);\n  }\n\n  React.useEffect(() => {\n    //получаем персональные данные и карточки только когда залогинены\n    if (loggedIn) {\n      Promise.all([api.getUserInfo(), api.getCards()])\n        .then(([userData, cardData]) => {\n          setCurrentUser(userData);\n          setCards(cardData);\n          setIsUserDataReceived(true);\n        })\n        .catch(err => {\n          setIsStatusPopupOpen(true);\n          setErrorMessage(err.status);\n        })\n    }\n  }, [loggedIn])\n\n\n  //колбэк - обновление данных пользователя новыми данными из формы редактирования профиля\n  function handleUpdateUser(newUserData) {\n    //submit status в момент ожидания\n    setIsSubmitting(false)\n    api.sendUserInfo(newUserData)\n      .then((newUserDataFromServer) => {\n        //обновляем контекст стейт currentUser после редактирования формы\n        setCurrentUser(newUserDataFromServer);\n        closeAllPopups();\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        //submit status в финале запроса\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - обновление аватара новыми данными из формы аватара\n  function handleUpdateAvatar(newUrl) {\n    setIsSubmitting(false);\n    api.sendUserAvatar(newUrl)\n      .then((newUserDataFromServer) => {\n        //обновляем контекст стейт currentUser после редактирования формы\n        setCurrentUser(newUserDataFromServer);\n        closeAllPopups();\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true);\n      })\n  }\n\n  //колбэк - лайка карточки\n  function handleCardLike(activatedCard) {\n    //проверяем, есть ли уже лайк на этой карточке\n    const isLiked = activatedCard.likes.some(like => like._id === currentUser._id);\n\n    //Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(activatedCard._id, !isLiked)\n      .then((updatedCard) => {\n        //обновляем массив карточек cards для рендеринга с новым кол-вом лайков\n        setCards((state) => state.map((c) => c._id === activatedCard._id ? updatedCard : c));\n        //setCards((state) => {\n        //  //в изначальном массиве перебираем через map карточки\n        //  //если находим лайкнутую, обновляем ее\n        //  //если находим нелайкнутую, не обновляем ее\n        //  return (state.map( (card) => {\n        //    return (card._id === activatedCard._id ? updatedCard : card)\n        //  }))\n        //})\n      })\n      .catch((err) => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      });\n  }\n\n  //колбэк - удаления карточки\n  function handleCardDelete(card) {\n    setIsSubmitting(false)\n    api.deleteCard(card._id)\n      .then(() => {\n        //оборачиваем setCards в колбек, чтобы удаление карточки со страницы происходило только после возвращения ответа от сервера\n        //после удаления карточки в стейт Cards записываем новый массив оставшихся карточек\n        setCards(\n          cards.filter(item => {\n            //возвращаем только те карточки, которые не совпадают по id с удаленной\n            return item._id !== card._id\n          }))\n        closeAllPopups();\n      })\n      .catch((err) => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - добавление новой карточки\n  function handleAddPlace(newCardData) {\n    setIsSubmitting(false);\n    api.sendNewCard(newCardData)\n      .then((newCardFromServer) => {\n        //в стейт Cards дозаписываем новую только что созданную карточку\n        setCards([newCardFromServer, ...cards]);\n        closeAllPopups();\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true);\n      })\n  }\n\n  //обработчик ошибок ответа сервера\n  function setErrorMessage(status) {\n    const errorTexts = {\n      '400': {\n        errorType: 'fault',\n        errorText: 'Некорректно заполнено одно из полей',\n      },\n      '401': {\n        errorType: 'fault',\n        errorText: 'Некорректный email или пароль',\n      },\n      '201': {\n        errorType: 'success',\n        errorText: 'Вы успешно зарегистрировались!',\n      },\n      other: {\n        errorType: 'fault',\n        errorText: 'Что - то пошло не так! Попробуйте ещё раз.',\n      },\n      serverError: {\n        errorType: 'fault',\n        errorText: 'Сервер не отвечает. Попробуйте позже.',\n      }\n    }\n    if (typeof status === \"undefined\") {\n      setPopupStatusMessage({\n        errorType: errorTexts.other.errorType,\n        errorText: errorTexts.other.errorText,\n      })\n    } else {\n      setPopupStatusMessage({\n        errorType: errorTexts[status].errorType,\n        errorText: errorTexts[status].errorText,\n      })\n    }\n  }\n\n  //обработчики форм\n  //колбэк - регистрации\n  function handleRegister(email, password) {\n    setIsSubmitting(false)\n    auth.register(email, password)\n      .then(data => {\n        //открываем попап статуса и добавляем успешный месседж для него\n        if (data) {\n          setIsLoggedIn(false)\n          setIsStatusPopupOpen(true);\n          setErrorMessage(201);\n        }\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - логина\n  function handleLogin(email, password) {\n    setIsSubmitting(false)\n    if (!email || !password) {\n      return\n    }\n    auth.login(email, password)\n      .then(data => {\n        if (data.token) {\n          localStorage.setItem('jwt', data.token)\n          //запишем емейл для подстановки в шапку, потому что он не подставляется в шапку при входе через логин\n          setEmail(email)\n          setIsLoggedIn(true);\n          history.push('/');\n        }\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - разлогиниться\n  function handleSignOut() {\n    localStorage.removeItem('jwt');\n    setIsLoggedIn(false);\n    history.push('/sign-in');\n  }\n\n  // если у пользователя есть токен в localStorage\n  function checkToken() {\n    const jwt = localStorage.getItem('jwt');\n    if (jwt) {\n      auth.getContent(jwt)\n        .then(res => {\n          if (res) {\n            //запишем емейл для подстановки в шапку\n            setEmail(res.data.email)\n            setIsLoggedIn(true);\n            history.push('/');\n          }\n        })\n        .catch(err => {\n          setIsStatusPopupOpen(true);\n          setErrorMessage(err.status);\n        })\n    }\n  }\n  //срабатывание проверки токена и автологина при загрузке страницы\n  React.useEffect(() => {\n    checkToken()\n  }, [])\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header\n          onSignOut={handleSignOut}\n          email={email} />\n        <Switch>\n          <Route path='/sign-up'>\n            <Register\n              onRegister={handleRegister}\n              isSubmitting={isSubmitting}\n              serverRequestStatus={popupStatusMessage.errorType} />\n          </Route>\n          <Route path='/sign-in'>\n            <Login\n              onLogin={handleLogin}\n              isSubmitting={isSubmitting}\n              serverRequestStatus={popupStatusMessage.errorType} />\n          </Route>\n          <>\n            <Switch>\n              {/* либо роут незащищенный будет, либо без спиннера, либо спиннер в ProtectedRoute рендерить.\n              Не понимаю, как спиннер можно отрендерить в App при ожидании данных и чтобы главная была защищена */}\n              {!isUserDataReceived && <Spinner />}\n              <ProtectedRoute\n                path='/'\n                loggedIn={loggedIn}\n                cards={cards}\n                onEditProfile={handleEditProfileClick}\n                onAddPlace={handleAddPlaceClick}\n                onEditAvatar={handleEditAvatarClick}\n                onCardClick={handleCardClick}\n                onCardLike={handleCardLike}\n                onCardDelete={setCardForDeletion}\n                isUserDataReceived={isUserDataReceived}\n                component={Main} />\n            </Switch>\n            <Footer />\n          </>\n        </Switch>\n        <InfoTooltip\n          isOpen={isStatusPopupOpen}\n          onClose={closeAllPopups}\n          popupStatusMessage={popupStatusMessage} />\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n          isSubmitting={isSubmitting} />\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n          isSubmitting={isSubmitting} />\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlace}\n          isSubmitting={isSubmitting} />\n        <ImagePopup\n          card={selectedCard}\n          onClose={closeAllPopups} />\n        <PopupConfirmDeletion\n          onClose={closeAllPopups}\n          handleCardDelete={handleCardDelete}\n          cardForDeletion={cardForDeletion}\n          isSubmitting={isSubmitting} />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n\n// return (\n//   <CurrentUserContext.Provider value={currentUser}>\n//     <div className=\"page\">\n//       <Header\n//         onSignOut={handleSignOut}\n//         email={email} />\n//       <Switch>\n//         <Route path='/sign-up'>\n//           <Register\n//             onRegister={handleRegister}\n//             isSubmitting={isSubmitting.register}\n//             serverRequestStatus={popupStatusMessage.errorType} />\n//         </Route>\n//         <Route path='/sign-in'>\n//           <Login\n//             onLogin={handleLogin}\n//             isSubmitting={isSubmitting.login}\n//             serverRequestStatus={popupStatusMessage.errorType} />\n//         </Route>\n//         <>\n//           <ProtectedRoute\n//             path='/'\n//             loggedIn={loggedIn}\n//             cards={cards}\n//             onEditProfile={handleEditProfileClick}\n//             onAddPlace={handleAddPlaceClick}\n//             onEditAvatar={handleEditAvatarClick}\n//             onCardClick={handleCardClick}\n//             onCardLike={handleCardLike}\n//             onCardDelete={setCardForDeletion}\n//             isUserDataReceived={isUserDataReceived}\n//             component={Main} />\n//           <Route exact path='/'>\n//             <EditProfilePopup\n//               isOpen={isEditProfilePopupOpen}\n//               onClose={closeAllPopups}\n//               onUpdateUser={handleUpdateUser}\n//               isSubmitting={isSubmitting.profile} />\n//             <EditAvatarPopup\n//               isOpen={isEditAvatarPopupOpen}\n//               onClose={closeAllPopups}\n//               onUpdateAvatar={handleUpdateAvatar}\n//               isSubmitting={isSubmitting.avatar} />\n//             <AddPlacePopup\n//               isOpen={isAddPlacePopupOpen}\n//               onClose={closeAllPopups}\n//               onAddPlace={handleAddPlace}\n//               isSubmitting={isSubmitting.place} />\n//             <ImagePopup\n//               card={selectedCard}\n//               onClose={closeAllPopups} />\n//             <PopupConfirmDeletion\n//               onClose={closeAllPopups}\n//               handleCardDelete={handleCardDelete}\n//               cardForDeletion={cardForDeletion}\n//               isSubmitting={isSubmitting.deletion} />\n//             <Footer />\n//           </Route>\n//         </>\n//       </Switch>\n//       <InfoTooltip\n//         isOpen={isStatusPopupOpen}\n//         onClose={closeAllPopups}\n//         popupStatusMessage={popupStatusMessage} />\n//     </div>\n//   </CurrentUserContext.Provider>\n// );\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}