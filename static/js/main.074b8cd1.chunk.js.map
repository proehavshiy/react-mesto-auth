{"version":3,"sources":["contexts/CurrentUserContext.js","utils/api.js","utils/auth.js","images/Mesto-logo.svg","components/MobileNavBar.js","components/DesktopNavBar.js","components/ExpandedNavBar.js","components/HeaderContent.js","components/Header.js","components/Footer.js","components/Popup.js","components/ImagePopup.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/PopupConfirmDeletion.js","components/PageWithForm.js","components/Login.js","components/Register.js","components/InfoTooltip.js","components/Spinner.js","components/ProtectedRoute.js","components/ErrorBoundary.js","components/App.js","reportWebVitals.js","index.js"],"names":["CurrentUserContext","React","createContext","api","serverUrl","cohort","token","this","_serverUrl","_cohort","_token","response","ok","json","Promise","reject","status","fetch","headers","authorization","then","_checkResponse","name","about","method","body","JSON","stringify","link","cardId","_id","avatar","cardID","like","BASE_URL","checkResponse","MobileNavBar","expandNavBar","useState","menuButton","setMenuButton","className","onClick","aria-label","type","DesktopNavBar","onSignOut","email","ExpandedNavBar","HeaderContent","location","useLocation","isMobile","useMediaQuery","query","isDesktop","isExpandedNavBar","setIsExpandedNavBar","useEffect","src","logoPath","alt","pathname","to","Header","Footer","Date","getFullYear","Popup","isOpen","onClose","children","togglePopupState","handleEscapeClose","evt","key","document","addEventListener","removeEventListener","target","currentTarget","ImagePopup","card","PopupWithForm","title","submitText","onSubmit","submitButtonState","theme","noValidate","autoComplete","disabled","value","EditProfilePopup","onUpdateUser","isSubmitting","currentUser","useContext","valid","errorMessage","signing","input","setInput","submitButtonText","inputNameErrorClass","inputNameErrorCaption","nameErrorMessage","inputSigningErrorClass","inputSigningErrorCaption","signingErrorMessage","handleUserInput","validity","validationMessage","prevState","preventDefault","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","inputLink","setInputLink","inputLinkErrorClass","inputLinkErrorCaption","AddPlacePopup","onAddPlace","inputTextErrorClass","inputTextErrorCaption","textErrorMessage","linkErrorMessage","PopupConfirmDeletion","handleCardDelete","cardForDeletion","PageWithForm","isRegister","Error","Login","onLogin","serverRequestStatus","password","inputEmailErrorClass","inputEmailErrorCaption","emailErrorMessage","inputPasswordErrorClass","inputPasswordErrorCaption","passwordErrorMessage","handleLoginInput","Register","onRegister","InfoTooltip","popupStatusMessage","history","useHistory","checkout","errorType","image","push","errorText","Spinner","ProtectedRoute","Component","component","props","loggedIn","isUserDataReceived","ErrorBoundary","state","error","errorInfo","setState","style","whiteSpace","toString","componentStack","Main","lazy","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditProfilePopupOpen","setIsEditProfilePopupOpen","setCardForDeletion","selectedCard","setSelectedCard","setIsLoggedIn","setEmail","setCurrentUser","setIsUserDataReceived","cards","setCards","setIsSubmitting","isStatusPopupOpen","setIsStatusPopupOpen","errorStatus","message","setPopupStatusMessage","closeAllPopups","setErrorMessage","errorTexts","other","serverError","checkToken","jwt","localStorage","getItem","res","data","catch","err","all","getUserInfo","getCards","userData","cardData","Provider","removeItem","path","auth","finally","setItem","fallback","exact","onEditProfile","onEditAvatar","onCardClick","onCardLike","activatedCard","isLiked","likes","some","changeLikeCardStatus","updatedCard","map","c","onCardDelete","newUserData","sendUserInfo","newUserDataFromServer","newUrl","sendUserAvatar","newCardData","sendNewCard","newCardFromServer","deleteCard","filter","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.074b8cd1.chunk.js","sourcesContent":["import React from 'react';\n\nconst CurrentUserContext = React.createContext();\n\nexport default CurrentUserContext;\n","class Api {\n  constructor({ serverUrl, cohort, token, }) {\n    this._serverUrl = serverUrl; // https://mesto.nomoreparties.co/v1\n    //this._requestPath = requestPath; // меняется постоянно напр: users/me\n    this._cohort = cohort; // cohort-22\n    this._token = token; // a039ff03-9c34-4fce-91e0-77cd409474e3\n  }\n  ////метод для единого вызова методов серверных запросов\n  //getPromiseAll(...requests) {\n  //  const promises = [...requests]\n  //  //console.log(\"Promise.all - массив изначальный\",promises);\n  //  return Promise.all(promises)\n  //}\n  //проверка метода\n  _checkResponse(response) {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Ошибка ${response.status}`)\n  }\n  //запрос информации профиля с сервера\n  getUserInfo() {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //запрос карточек с сервера\n  getCards() {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //отправка на сервер новых данных пользователя\n  //Метод PATCH обычно используют для обновления сущностей, уже существующих на сервере\n  sendUserInfo({ name, about }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  sendNewCard({ name, link }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name, //название карточки\n        link: link //ссылка на картинку\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  deleteCard(cardId) {\n    //{ name, link },\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        //name: name, //название карточки\n        //link: link, //ссылка на картинку\n        _id: cardId\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  //Обновление аватара пользователя\n  sendUserAvatar({ avatar }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/likes/${cardID}`, {\n      method: like ? 'PUT' : 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardID: cardID,\n        like: like\n      })\n    })\n      .then(this._checkResponse)\n  }\n\n}\n\nconst api = new Api({\n  serverUrl: 'https://mesto.nomoreparties.co/v1',\n  cohort: 'cohort-24',\n  token: 'edb7481a-fcf7-4397-94a7-daeb2327e95b'\n})\n\nexport default api;\n","export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst checkResponse = (response) => response.ok ? response.json() : Promise.reject(response)\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  })\n    .then(checkResponse);\n}\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  })\n    .then(checkResponse)\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Authorization\": `Bearer ${token}`\n    }\n  })\n    .then(checkResponse)\n}\n","export default __webpack_public_path__ + \"static/media/Mesto-logo.5f3664ca.svg\";","import React from 'react';\n\nfunction MobileNavBar({ expandNavBar }) {\n  const [menuButton, setMenuButton] = React.useState(false);\n\n  function openMenu() {\n    setMenuButton(true)\n    expandNavBar(true)\n\n  }\n  function closeMenu() {\n\n    setMenuButton(false)\n    expandNavBar(false)\n  }\n\n  return (\n    !menuButton ? (\n      <>\n        <div className=\"page__button header__button\" onClick={openMenu}>\n          <div className='header__button header__button_burger'></div>\n          <div className='header__button header__button_burger'></div>\n          <div className='header__button header__button_burger'></div>\n        </div>\n      </>\n    ) : (\n      <>\n        <button className=\"page__button page__button_type_close\" onClick={closeMenu} aria-label=\"Кнопка Закрыть меню\" type=\"button\"></button>\n      </>\n    )\n  );\n}\n\nexport default MobileNavBar;\n","import React from 'react';\n\nfunction DesktopNavBar({ onSignOut, email }) {\n  return (\n    <>\n      <p className=\"header__email\">{email}</p>\n      <button className=\"header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n    </>\n  );\n}\n\nexport default DesktopNavBar;\n","import React from 'react';\n\nfunction ExpandedNavBar({ onSignOut, email }) {\n  return (\n    <div className={`header__expanded-nav-bar`}>\n      <p className=\"header__email\">{email}</p>\n      <button className=\"header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n    </div>\n  );\n}\n\nexport default ExpandedNavBar;\n\n\n","import React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport logoPath from '../images/Mesto-logo.svg';\nimport MobileNavBar from './MobileNavBar';\nimport DesktopNavBar from './DesktopNavBar';\nimport ExpandedNavBar from './ExpandedNavBar';\n\nfunction HeaderContent({ onSignOut, email }) {\n  const location = useLocation();\n  const isMobile = useMediaQuery({ query: '(max-width: 480px)' })\n  const isDesktop = useMediaQuery({ query: '(min-width: 481px)' })\n\n  const [isExpandedNavBar, setIsExpandedNavBar] = React.useState(false);\n\n  //если разрешение десктопное или перешли на другую страницу, то автоматически скрываем меню\n  React.useEffect(() => {\n    setIsExpandedNavBar(false);\n  }, [isDesktop, location])\n\n  //в зависимости от текущей страницы и статуса логина отображаем нужные поля\n  return (\n    <div className=\"header__content\" >\n      {isExpandedNavBar &&\n        <ExpandedNavBar\n          onSignOut={onSignOut}\n          email={email} />\n      }\n      <div className=\"header__main page__animation\">\n        <img className=\"logo\" src={logoPath} alt=\"логотип Место\" />\n        <nav className=\"header__nav-bar\">\n          {\n            (location.pathname === '/' && (\n              (isMobile && <MobileNavBar expandNavBar={setIsExpandedNavBar} />) ||\n              (isDesktop && <DesktopNavBar onSignOut={onSignOut} email={email} />)\n            )) ||\n            (location.pathname === '/sign-in' && <NavLink className=\"header__button page__button\" to=\"/sign-up\">Регистрация</NavLink>)\n            ||\n            (location.pathname === '/sign-up' && <NavLink className=\"header__button page__button\" to=\"/sign-in\">Войти</NavLink>)\n          }\n        </nav>\n      </div >\n    </div >\n  );\n}\n\nexport default HeaderContent;\n\n/*\n\n(location.pathname === '/' && (\n          isMobile && (\n            !menuButton ? (\n              <>\n                <div className=\"page__button header__button\" onClick={openMenu}>\n                  <div className='header__button header__button_burger'></div>\n                  <div className='header__button header__button_burger'></div>\n                  <div className='header__button header__button_burger'></div>\n                </div>\n              </>\n            ) : (\n              <button className=\"page__button page__button_type_close\" onClick={closeMenu} aria-label=\"Кнопка Закрыть меню\" type=\"button\"></button>\n            )\n          ),\n          isDesktop && (\n            <>\n              <p className=\"header__email\">{email}</p>\n              <button className=\"header__link header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n            </>\n          )\n        ))\n\n\n<div className=\"header__link header__button page__button\" onClick={handleMobileButton}>\n              <div className='header__button_burger'></div>\n              <div className='header__button_burger'></div>\n              <div className='header__button_burger'></div>\n            </div>\n\n(location.pathname === '/' &&\n          <>\n            <p className=\"header__email\">{email}</p>\n            <button className=\"header__link header__button header__button_logout page__button\" onClick={onSignOut}>Выйти</button>\n          </>\n        ) ||\n\n\n{!loggedIn? (\n            //в зависимости от текущей страницы отображаем нужную ссылку\n            location.pathname === '/sign-in' && <NavLink className=\"header__link page__button\" to=\"/sign-up\">Регистрация</NavLink> ||\n            location.pathname === '/sign-up' && <NavLink className=\"header__link page__button\" to=\"/sign-in\">Войти</NavLink>\n\n        ):(\n          <>\n              <p className=\"header__email\">{email}</p>\n              <button className=\"header__link header__button page__button\" onClick={signOut}>Выйти</button>\n          </>\n        )}\n*/\n","import React from 'react';\nimport HeaderContent from './HeaderContent';\n\n\nfunction Header({ onSignOut, email }) {\n  return (\n    <header className=\"header page__section page__animation\">\n      <HeaderContent\n        onSignOut={onSignOut}\n        email={email} />\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Footer() {\n  return(\n    <footer className=\"footer page__section page__animation\">\n      <p className=\"footer__copyright\">\n        © {new Date().getFullYear()} Mesto Russia\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction Popup({ name, isOpen, onClose, children }) {\n  const togglePopupState = isOpen ? 'popup__flexed popup_opened' : 'popup__flexed';\n\n  //закрытие по крестику, по клику вне формы\n  function handleOverlayClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n  function handleButtonClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n\n  //закрытие по Esc попапов\n  React.useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeClose = (evt) => {\n      if (evt.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keyup', handleEscapeClose);\n    return () => {\n      document.removeEventListener('keyup', handleEscapeClose);\n    }\n  }, [isOpen, onClose]);\n\n\n  return (\n    <div className={`popup popup_${name} ${togglePopupState}`} onClick={handleOverlayClose}>\n      <div className={`popup__container popup__container_${name}`}>\n        <button className={`page__button page__button_type_close popup__button-close`} onClick={handleButtonClose} aria-label=\"Кнопка Закрыть\" type=\"button\" />\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import React from 'react';\nimport Popup from './Popup';\n\nfunction ImagePopup({ card, onClose }) {\n\n  return (\n    <Popup\n      name='open-image'\n      isOpen={card}\n      onClose={onClose}>\n      <figure className=\"popup__figure\">\n        <img className=\"popup__image\" src={card ? card.link : ''} alt={card ? `картинка: ${card.name}` : ''} />\n        <figcaption className=\"popup__figcaption\">\n          {card ? card.name : ''}\n        </figcaption>\n      </figure>\n    </Popup>\n  )\n}\nexport default ImagePopup;\n","import React from 'react';\nimport Popup from './Popup';\n\nfunction PopupWithForm({ name, title, submitText, isOpen, onClose, onSubmit, submitButtonState, theme, children }) {\n\n  return (\n    <Popup\n      name={name}\n      isOpen={isOpen}\n      onClose={onClose}>\n      <form className={`form form_theme_${theme}`} onSubmit={onSubmit} name={`${name}-form`} noValidate autoComplete=\"off\">\n        <h2 className=\"form__heading\">\n          {title}\n        </h2>\n        {children}\n        <button className={`page__button form__button-save form__button-save_theme_${theme}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n          {submitText}\n        </button>\n      </form>\n    </Popup>\n  )\n}\n\nexport default PopupWithForm;\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser, isSubmitting }) {\n\n  const theme = 'white';\n\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //стейт-переменная для управляемых компонентов формы\n  const [input, setInput] = React.useState({\n    name: {\n      value: '',\n      valid: true,\n      errorMessage: ''\n    },\n    signing: {\n      value: '',\n      valid: true,\n      errorMessage: ''\n    }\n  });\n\n  const submitButtonState = !input.name.valid || !input.signing.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputNameErrorClass = input.name.errorMessage ? 'form__input_error' : '';\n  const inputNameErrorCaption = input.name.errorMessage ? 'form__input-error_active' : '';\n  const nameErrorMessage = input.name.errorMessage;\n\n  const inputSigningErrorClass = input.signing.errorMessage ? 'form__input_error' : '';\n  const inputSigningErrorCaption = input.signing.errorMessage ? 'form__input-error_active' : '';\n  const signingErrorMessage = input.signing.errorMessage;\n\n  // После загрузки текущего пользователя из API\n  // его данные будут использованы в управляемых компонентах.\n  React.useEffect(() => {\n    // if нужен для того, чтобы данные в инпутах сбрасывались в изначальное состояние только при открытии формы. так красивее\n    if (isOpen) {\n      setInput(prevState => ({\n        ...prevState,\n        name: {\n          value: currentUser.name,\n          valid: true,\n          errorMessage: ''\n        },\n        signing: {\n          value: currentUser.about,\n          valid: true,\n          errorMessage: ''\n        }\n      })\n      );\n    }\n  }, [currentUser, isOpen]);\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём значения управляемых компонентов во внешний обработчик\n    onUpdateUser({\n      name: input.name.value,\n      about: input.signing.value,\n    });\n  }\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    }))\n  }\n\n  return (\n    <PopupWithForm\n      name=\"change-profile\"\n      title=\"Редактировать профиль\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      theme={theme}>\n      <fieldset className=\"form__profile-information\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputNameErrorClass}`} value={input.name ? input.name.value : ''} onChange={handleUserInput} type=\"text\" name=\"name\" placeholder=\"Имя\" required minLength={2} maxLength={40} />\n          <span className={`form__input-error ${inputNameErrorCaption}`}>\n            {nameErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputSigningErrorClass}`} value={input.signing ? input.signing.value : ''} onChange={handleUserInput} type=\"text\" name=\"signing\" placeholder=\"Подпись\" required minLength={2} maxLength={200} />\n          <span className={`form__input-error ${inputSigningErrorCaption}`}>\n            {signingErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n\n}\n\nexport default EditProfilePopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar, isSubmitting }) {\n\n  const theme = 'white';\n\n  const [inputLink, setInputLink] = React.useState({});\n\n  const submitButtonState = !inputLink.value || !inputLink.value || !inputLink.valid || !inputLink.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputLinkErrorClass = inputLink.errorMessage ? 'form__input_error' : '';\n  const inputLinkErrorCaption = inputLink.errorMessage ? 'form__input-error_active' : '';\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём новый url во внешний обработчик\n    onUpdateAvatar({\n      avatar: inputLink.value\n    });\n  }\n\n  React.useEffect(() => {\n    // if нужен для того, чтобы данные в инпутах сбрасывались в изначальное состояние только при открытии формы. так красивее\n    if (isOpen) {\n      setInputLink({\n        value: '',\n        valid: true,\n        errorMessage: ''\n      })\n    }\n  }, [isOpen]);\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { value, validity: { valid }, validationMessage } = target;\n\n    setInputLink({\n      value,\n      valid,\n      errorMessage: validationMessage\n    })\n  }\n\n  return (\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Обновить аватар\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      theme={theme}>\n      <fieldset className=\"form__profile-information\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputLinkErrorClass}`} value={inputLink.value || ''} onChange={handleUserInput} type=\"url\" name=\"image-link\" placeholder=\"Ссылка на картинку\" required />\n          <span className={`form__input-error ${inputLinkErrorCaption}`}>\n            {inputLink.errorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n\n  )\n}\n\nexport default EditAvatarPopup;\n\n/*\n//валидация инпутов\n  function handleChange(evt){\n    setLink(evt.target.value)\n\n    //вызов валидации\n    handleCheckInputValidity(evt.target);\n  }\n  const [link, setLink] = React.useState('');\n  const [isValidInput, setIsValidInput] = React.useState({\n    name: '',\n    status: ''\n  });\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [submitButton, setSubmitButton] = React.useState('');\n  const toggleInput = isValidInput.status ? ('popup__input_error'):('');\n  const toggleError = isValidInput.status ? ('popup__input-error_active'):('');\n  const toggleMessage = isValidInput.status && errorMessage;\n\n  //проверка валидности\n  function handleCheckInputValidity(input) {\n    if (!input.validity.valid) {\n      //если валидный\n      setIsValidInput({\n        name: input.name,\n        status: true\n      });\n      setErrorMessage(input.validationMessage);\n      setSubmitButton(true)\n    } else {\n      //если невалидный\n      setIsValidInput({\n        name: input.name,\n        status: false\n      });\n      setErrorMessage('');\n      setSubmitButton(false)\n    }\n  }\n  //сброс ошибок при закрытии поля\n  function resetValidation() {\n    setIsValidInput({\n      name: '',\n      status: true\n    });\n    setErrorMessage('');\n  }\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace, isSubmitting }) {\n\n  const theme = 'white';\n\n  const [input, setInput] = React.useState({\n    location: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    },\n    link: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    }\n  });\n\n  const submitButtonState = !input.location.valid || !input.link.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Добавление...';\n\n  const inputTextErrorClass = input.location.errorMessage ? 'form__input_error' : '';\n  const inputTextErrorCaption = input.location.errorMessage ? 'form__input-error_active' : '';\n  const textErrorMessage = input.location.errorMessage;\n\n  const inputLinkErrorClass = input.link.errorMessage ? 'form__input_error' : '';\n  const inputLinkErrorCaption = input.link.errorMessage ? 'form__input-error_active' : '';\n  const linkErrorMessage = input.link.errorMessage;\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    }))\n  }\n\n  //обработчик формы\n  function handleAddPlaceSubmit(evt) {\n    evt.preventDefault();\n\n    onAddPlace({\n      name: input.location.value,\n      link: input.link.value\n    })\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля при закрытии формы\n    if (isOpen) {\n      setInput({\n        location: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        },\n        link: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        }\n      });\n    }\n  }, [isOpen]);\n\n  return (\n    <PopupWithForm\n      name=\"add-card\"\n      title=\"Новое место\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleAddPlaceSubmit}\n      submitButtonState={submitButtonState}\n      theme={theme}>\n      <fieldset className=\"form__profile-information\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputTextErrorClass}`} value={input.location ? input.location.value : ''} onChange={handleUserInput} type=\"text\" name=\"location\" placeholder=\"Название\" required minLength={2} maxLength={30} />\n          <span className={`form__input-error ${inputTextErrorCaption}`}>\n            {textErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputLinkErrorClass}`} value={input.link ? input.link.value : ''} onChange={handleUserInput} type=\"url\" name=\"link\" placeholder=\"Ссылка на картинку\" required />\n          <span className={`form__input-error ${inputLinkErrorCaption}`}>\n            {linkErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n}\n\nexport default AddPlacePopup;\n\n/*\n//для сброса значений при закрытии формы. Зависимость от defaultForm\n  // потому что если от isOpen, я не могу добавить карточку. Данные стейтов очищаются раньше, чем отправка происходит\n  //приходится 2 раза сбрасывать\n  //стейт для сброса полей формы к начальному состоянию\n  const [defaultForm, setDefaultForm] = React.useState(false);\n  //React.useEffect(()=> {\n  //  setInputText('')\n  //  setInputLink('')\n  //  setDefaultForm(false)\n  //},[defaultForm]);\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction PopupConfirmDeletion({ onClose, handleCardDelete, cardForDeletion, isSubmitting }) {\n\n  const theme = 'white';\n\n  const submitButtonText = isSubmitting ? 'Да' : 'Удаление...';\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    handleCardDelete(cardForDeletion)\n  }\n  return (\n    <PopupWithForm\n      name=\"confirm-deletion\"\n      title=\"Вы уверены?\"\n      submitText={submitButtonText}\n      isOpen={cardForDeletion} //целый объект перекидываю для true/false результата/ работает но мб память лишнюю жрет такой способ\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={cardForDeletion}\n      theme={theme} />\n  )\n}\n\nexport default PopupConfirmDeletion;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction PageWithForm({ name, title, submitText, onSubmit, submitButtonState, isRegister, theme, children }) {\n\n  return (\n    <div className='page-with-form page__block-alignment page__animation'>\n      <div className={`page-with-form__container page-with-form__container_${name}`}>\n        <form className={`form form_theme_${theme}`} onSubmit={onSubmit} name={`${name}-form`} noValidate autoComplete=\"off\">\n          <h2 className=\"form__heading form__heading_style\" onClick={() => { throw new Error('test error') }}>\n            {title}\n          </h2>\n          {children}\n          <button className={`page__button form__button-save form__button-save_margin form__button-save_theme_${theme}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n            {submitText}\n          </button>\n          {isRegister && (\n            <p className='form__redirection'>Уже зарегистрированы?\n              <Link to=\"/sign-in\" className=\"form__link page__button\">Войти</Link>\n            </p>\n          )}\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default PageWithForm;\n","import React from 'react';\nimport PageWithForm from './PageWithForm';\n\nfunction Login({ onLogin, isSubmitting, serverRequestStatus }) {\n  const [input, setInput] = React.useState({\n    email: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    },\n    password: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    }\n  });\n\n  const theme = 'dark';\n\n  const submitButtonState = !input.email.valid || !input.password.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Войти' : 'Вход...';\n\n  const inputEmailErrorClass = input.email.errorMessage ? 'form__input_error' : '';\n  const inputEmailErrorCaption = input.email.errorMessage ? 'form__input-error_active' : '';\n  const emailErrorMessage = input.email.errorMessage;\n\n  const inputPasswordErrorClass = input.password.errorMessage ? 'form__input_error' : '';\n  const inputPasswordErrorCaption = input.password.errorMessage ? 'form__input-error_active' : '';\n  const passwordErrorMessage = input.password.errorMessage;\n\n  //обработчик инпутов\n  function handleLoginInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    })\n    )\n  }\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!input.email.value || !input.password.value) {\n      return\n    }\n\n    onLogin(input.email.value, input.password.value)\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля после отправки формы\n    //if нужен для того, чтобы поля очищались только при успешном ответе сервера\n    if (serverRequestStatus === 'success') {\n      setInput({\n        email: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        },\n        password: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        }\n      });\n    }\n  }, [serverRequestStatus]);\n\n  return (\n    <PageWithForm\n      name=\"login\"\n      title=\"Вход\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={false}\n      theme={theme}>\n      <fieldset className=\"form__profile-information form__profile-information_margin\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputEmailErrorClass}`} value={input.email ? input.email.value : ''} onChange={handleLoginInput} type=\"email\" name=\"email\" placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`form__input-error ${inputEmailErrorCaption}`}>\n            {emailErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputPasswordErrorClass}`} value={input.password ? input.password.value : ''} onChange={handleLoginInput} type=\"password\" name=\"password\" placeholder=\"Пароль\" required minLength={6} />\n          <span className={`form__input-error ${inputPasswordErrorCaption}`}>\n            {passwordErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PageWithForm>\n  )\n}\n\nexport default Login;\n","import React from 'react';\nimport PageWithForm from './PageWithForm';\n\nfunction Register({ onRegister, isSubmitting, serverRequestStatus }) {\n  const [input, setInput] = React.useState({\n    email: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    },\n    password: {\n      value: '',\n      valid: false,\n      errorMessage: ''\n    }\n  });\n\n  const theme = 'dark';\n\n  const submitButtonState = !input.email.valid || !input.password.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Зарегистрироваться' : 'Регистрация...';\n\n  const inputEmailErrorClass = input.email.errorMessage ? 'form__input_error' : '';\n  const inputEmailErrorCaption = input.email.errorMessage ? 'form__input-error_active' : '';\n  const emailErrorMessage = input.email.errorMessage;\n\n  const inputPasswordErrorClass = input.password.errorMessage ? 'form__input_error' : '';\n  const inputPasswordErrorCaption = input.password.errorMessage ? 'form__input-error_active' : '';\n  const passwordErrorMessage = input.password.errorMessage;\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    })\n    )\n  }\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    if (!input.email.value || !input.password.value) {\n      return\n    }\n\n    onRegister(input.email.value, input.password.value)\n\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля после отправки формы\n    //if нужен для того, чтобы поля очищались только при успешном ответе сервера\n    if (serverRequestStatus === 'success') {\n      setInput({\n        email: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        },\n        password: {\n          value: '',\n          valid: false,\n          errorMessage: ''\n        }\n      });\n    }\n  }, [serverRequestStatus]);\n\n  return (\n    <PageWithForm\n      name=\"register\"\n      title=\"Регистрация\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={true}\n      theme={theme}>\n      <fieldset className=\"form__profile-information form__profile-information_margin\">\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputEmailErrorClass}`} value={input.email ? input.email.value : ''} onChange={handleUserInput} type=\"email\" name=\"email\" placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`form__input-error ${inputEmailErrorCaption}`}>\n            {emailErrorMessage}\n          </span>\n        </section>\n        <section className=\"form__input-section\">\n          <input className={`form__input form__input_theme_${theme} ${inputPasswordErrorClass}`} value={input.password ? input.password.value : ''} onChange={handleUserInput} type=\"password\" name=\"password\" placeholder=\"Пароль\" required minLength={6} />\n          <span className={`form__input-error ${inputPasswordErrorCaption}`}>\n            {passwordErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PageWithForm>\n  )\n}\n\nexport default Register;\n\n\n\n/*\n<PopupWithForm\n        name=\"add-card\"\n        title=\"Новое место\"\n        submitText={submitButtonText}\n        isOpen={isOpen}\n        onClose={onClose}\n        onSubmit={handleAddPlaceSubmit}\n        submitButtonState={submitButtonState}>\n\n        </PopupWithForm>\n*/\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Popup from './Popup';\n\nfunction InfoTooltip({ isOpen, onClose, popupStatusMessage }) {\n\n  //const theme = 'dark';\n\n  const history = useHistory();\n  const checkout = popupStatusMessage.errorType === 'success'\n  const image = checkout ? 'popup__image-status_type_success' : 'popup__image-status_type_reject'\n  function handleClose() {\n    onClose()\n    //редиректим хуком на страницу логина при успешной регистрации\n    checkout && history.push('/sign-in')\n  }\n  return (\n    <Popup\n      name=\"status\"\n      isOpen={isOpen}\n      onClose={handleClose}>\n      <div className=\"popup__status\">\n        <div className={`popup__image-status ${image}`}></div>\n        <h2 className=\"popup__heading popup__heading_status\">\n          {popupStatusMessage.errorText}\n        </h2>\n      </div>\n    </Popup>\n  )\n}\n\nexport default InfoTooltip;\n","import React from 'react';\n\nfunction Spinner() {\n  return (\n    <div className=\"spinner page__section\">\n      <div className='spinner__body'></div>\n    </div>\n  )\n}\n\nexport default Spinner;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Spinner from \"./Spinner\";\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n  return (\n    //       <Route>\n    //     {\n    //       () => {\n    //         return props.loggedIn ? (<Component {...props} />) : (<Redirect to='/sign-in' />)\n    //       }\n    //     }\n    //   </Route>\n    // )\n\n    <Route>\n      {\n        () => {\n          //при ожидании ответа от сервера при получении данных пользователя и карточек показываем спиннер ожидания\n          return props.loggedIn ? (\n            props.isUserDataReceived ? (<Component {...props} />\n            ) : (<Spinner />)\n          ) : (<Redirect to='/sign-in' />)\n        }\n      }\n    </Route>\n  )\n}\n\nexport default ProtectedRoute;\n\n// const ProtectedRoute = ({ component: Component, ...props }) => {\n//   return (\n//     <Route>\n//       {\n//         () => {\n//           return props.loggedIn ? (<Component {...props} />) : (<Redirect to='/sign-in' />)\n//         }\n//       }\n//     </Route>\n//   )\n// }\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// class ErrorBoundary extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       hasError: false,\n//       error: null,\n//       errorInfo: null\n//     }\n//   }\n\n//   //Используйте static getDerivedStateFromError() при рендеринге запасного UI в случае отлова ошибки.\n//   static getDerivedStateFromError(error) {\n//     // Обновить состояние с тем, чтобы следующий рендер показал запасной UI.\n//     this.setState({\n//       hasError: true,\n//     })\n//     // return { hasError: true };\n//   }\n\n//   //Используйте componentDidCatch() при написании кода для журналирования информации об отловленной ошибке.\n//   componentDidCatch(error, errorInfo) {\n//     // Можно также сохранить информацию об ошибке в соответствующую службу журнала ошибок\n//     //но я выведу в консоль\n//     this.setState({\n//       error: error,\n//       errorInfo: errorInfo\n//     })\n//     console.log('error:', this.error);\n//     console.log('errorInfo:', this.errorInfo.componentStack);\n//   }\n\n//   render() {\n//     // const history = this.props.history;\n\n//     if (this.state.hasError) {\n//       return (\n//         <>\n//           <div>Возникла ошибка</div>\n//           {/* <NavLink onClick={() => history.goBack()}></NavLink> */}\n//         </>\n//       )\n//     };\n\n//     return this.props.children;\n//   }\n// }\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    })\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport api from '../utils/api';\nimport * as auth from '../utils/auth';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport Header from './Header';\n// import Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport PopupConfirmDeletion from './PopupConfirmDeletion';\nimport Login from './Login';\nimport Register from './Register';\nimport InfoTooltip from './InfoTooltip';\nimport ProtectedRoute from './ProtectedRoute';\nimport Spinner from \"./Spinner\";\nimport ErrorBoundary from './ErrorBoundary';\n\n//тестирование lazy loading\nconst Main = React.lazy(() => import('./Main'));\n// const Register = React.lazy(() => import('./Register'));\n// const Login = React.lazy(() => import('./Login'));\n\nfunction App() {\n\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [cardForDeletion, setCardForDeletion] = React.useState(null);\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  const [loggedIn, setIsLoggedIn] = React.useState(false);\n  const [email, setEmail] = React.useState('');\n  const history = useHistory();\n  //стейт для юзеринфо\n  const [currentUser, setCurrentUser] = React.useState({\n    name: '',\n    about: '',\n    avatar: ''\n  });\n  //проверяем статус получения данных. Если false, не рендерим Main и Footer\n  const [isUserDataReceived, setIsUserDataReceived] = React.useState(false);\n  //стейт для карточек\n  const [cards, setCards] = React.useState([]);\n  // submit status\n  const [isSubmitting, setIsSubmitting] = React.useState(true);\n  const [isStatusPopupOpen, setIsStatusPopupOpen] = React.useState(false);\n  const [popupStatusMessage, setPopupStatusMessage] = React.useState({\n    errorStatus: null,\n    message: '',\n  });\n\n  //колбэк - закрытия попапов с формой\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  function handleCardClick(state) {\n    setSelectedCard(state);\n  }\n  //закрытие попапа\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n    setCardForDeletion(null);\n    setIsStatusPopupOpen(false);\n    // setTimeout(setPopupStatusMessage({\n    //   errorStatus: null,\n    //   message: '',\n    // }), 1000);\n  }\n\n  React.useEffect(() => {\n    //получаем персональные данные и карточки только когда залогинены\n    if (loggedIn) {\n      Promise.all([api.getUserInfo(), api.getCards()])\n        .then(([userData, cardData]) => {\n          setCurrentUser(userData);\n          setCards(cardData);\n          setIsUserDataReceived(true);\n        })\n        .catch(err => {\n          setIsStatusPopupOpen(true);\n          setErrorMessage(err.status);\n        })\n    }\n  }, [loggedIn])\n\n\n  //колбэк - обновление данных пользователя новыми данными из формы редактирования профиля\n  function handleUpdateUser(newUserData) {\n    //submit status в момент ожидания\n    setIsSubmitting(false)\n    api.sendUserInfo(newUserData)\n      .then((newUserDataFromServer) => {\n        //обновляем контекст стейт currentUser после редактирования формы\n        setCurrentUser(newUserDataFromServer);\n        closeAllPopups();\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        //submit status в финале запроса\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - обновление аватара новыми данными из формы аватара\n  function handleUpdateAvatar(newUrl) {\n    setIsSubmitting(false);\n    api.sendUserAvatar(newUrl)\n      .then((newUserDataFromServer) => {\n        //обновляем контекст стейт currentUser после редактирования формы\n        setCurrentUser(newUserDataFromServer);\n        closeAllPopups();\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true);\n      })\n  }\n\n  //колбэк - лайка карточки\n  function handleCardLike(activatedCard) {\n    //проверяем, есть ли уже лайк на этой карточке\n    const isLiked = activatedCard.likes.some(like => like._id === currentUser._id);\n\n    //Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(activatedCard._id, !isLiked)\n      .then((updatedCard) => {\n        //обновляем массив карточек cards для рендеринга с новым кол-вом лайков\n        setCards((state) => state.map((c) => c._id === activatedCard._id ? updatedCard : c));\n        //setCards((state) => {\n        //  //в изначальном массиве перебираем через map карточки\n        //  //если находим лайкнутую, обновляем ее\n        //  //если находим нелайкнутую, не обновляем ее\n        //  return (state.map( (card) => {\n        //    return (card._id === activatedCard._id ? updatedCard : card)\n        //  }))\n        //})\n      })\n      .catch((err) => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      });\n  }\n\n  //колбэк - удаления карточки\n  function handleCardDelete(card) {\n    setIsSubmitting(false)\n    api.deleteCard(card._id)\n      .then(() => {\n        //оборачиваем setCards в колбек, чтобы удаление карточки со страницы происходило только после возвращения ответа от сервера\n        //после удаления карточки в стейт Cards записываем новый массив оставшихся карточек\n        setCards(\n          cards.filter(item => {\n            //возвращаем только те карточки, которые не совпадают по id с удаленной\n            return item._id !== card._id\n          }))\n        closeAllPopups();\n      })\n      .catch((err) => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - добавление новой карточки\n  function handleAddPlace(newCardData) {\n    setIsSubmitting(false);\n    api.sendNewCard(newCardData)\n      .then((newCardFromServer) => {\n        //в стейт Cards дозаписываем новую только что созданную карточку\n        setCards([newCardFromServer, ...cards]);\n        closeAllPopups();\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true);\n      })\n  }\n\n  //обработчик ошибок ответа сервера\n  function setErrorMessage(status) {\n    const errorTexts = {\n      '400': {\n        errorType: 'fault',\n        errorText: 'Некорректно заполнено одно из полей',\n      },\n      '401': {\n        errorType: 'fault',\n        errorText: 'Некорректный email или пароль',\n      },\n      '201': {\n        errorType: 'success',\n        errorText: 'Вы успешно зарегистрировались!',\n      },\n      other: {\n        errorType: 'fault',\n        errorText: 'Что - то пошло не так! Попробуйте ещё раз.',\n      },\n      serverError: {\n        errorType: 'fault',\n        errorText: 'Сервер не отвечает. Попробуйте позже.',\n      }\n    }\n    if (typeof status === \"undefined\") {\n      setPopupStatusMessage({\n        errorType: errorTexts.other.errorType,\n        errorText: errorTexts.other.errorText,\n      })\n    } else {\n      setPopupStatusMessage({\n        errorType: errorTexts[status].errorType,\n        errorText: errorTexts[status].errorText,\n      })\n    }\n  }\n\n  //обработчики форм\n  //колбэк - регистрации\n  function handleRegister(email, password) {\n    setIsSubmitting(false)\n    auth.register(email, password)\n      .then(data => {\n        //открываем попап статуса и добавляем успешный месседж для него\n        if (data) {\n          setIsLoggedIn(false)\n          setIsStatusPopupOpen(true);\n          setErrorMessage(201);\n        }\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - логина\n  function handleLogin(email, password) {\n    setIsSubmitting(false)\n    if (!email || !password) {\n      return\n    }\n    auth.login(email, password)\n      .then(data => {\n        if (data.token) {\n          localStorage.setItem('jwt', data.token)\n          //запишем емейл для подстановки в шапку, потому что он не подставляется в шапку при входе через логин\n          setEmail(email)\n          setIsLoggedIn(true);\n          history.push('/');\n        }\n      })\n      .catch(err => {\n        setIsStatusPopupOpen(true);\n        setErrorMessage(err.status);\n      })\n      .finally(() => {\n        setIsSubmitting(true)\n      })\n  }\n\n  //колбэк - разлогиниться\n  function handleSignOut() {\n    localStorage.removeItem('jwt');\n    setIsLoggedIn(false);\n    history.push('/sign-in');\n  }\n\n  // если у пользователя есть токен в localStorage\n  function checkToken() {\n    const jwt = localStorage.getItem('jwt');\n    if (jwt) {\n      auth.getContent(jwt)\n        .then(res => {\n          if (res) {\n            //запишем емейл для подстановки в шапку\n            setEmail(res.data.email)\n            setIsLoggedIn(true);\n            history.push('/');\n          }\n        })\n        .catch(err => {\n          setIsStatusPopupOpen(true);\n          setErrorMessage(err.status);\n        })\n    }\n  }\n  //срабатывание проверки токена и автологина при загрузке страницы\n  React.useEffect(() => {\n    checkToken()\n  }, [])\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header\n          onSignOut={handleSignOut}\n          email={email} />\n        <Switch>\n          <Route path='/sign-up'>\n            <Register\n              onRegister={handleRegister}\n              isSubmitting={isSubmitting}\n              serverRequestStatus={popupStatusMessage.errorType} />\n          </Route>\n\n          <Route path='/sign-in'>\n            <ErrorBoundary>\n              <Login\n                onLogin={handleLogin}\n                isSubmitting={isSubmitting}\n                serverRequestStatus={popupStatusMessage.errorType} />\n            </ErrorBoundary>\n\n          </Route>\n\n\n          <>\n\n            {/* либо роут незащищенный будет, либо без спиннера, либо спиннер в ProtectedRoute рендерить.\n              Не понимаю, как спиннер можно отрендерить в App при ожидании данных и чтобы главная была защищена */}\n            {/* {!isUserDataReceived && <Spinner />}\n              <ProtectedRoute\n                exact path='/'\n                loggedIn={loggedIn}\n                cards={cards}\n                onEditProfile={handleEditProfileClick}\n                onAddPlace={handleAddPlaceClick}\n                onEditAvatar={handleEditAvatarClick}\n                onCardClick={handleCardClick}\n                onCardLike={handleCardLike}\n                onCardDelete={setCardForDeletion}\n                isUserDataReceived={isUserDataReceived}\n                component={Main} /> */}\n\n            {/* lazy loading main */}\n            <Suspense fallback={<Spinner />}>\n              <ProtectedRoute\n                exact path='/'\n                loggedIn={loggedIn}\n                cards={cards}\n                onEditProfile={handleEditProfileClick}\n                onAddPlace={handleAddPlaceClick}\n                onEditAvatar={handleEditAvatarClick}\n                onCardClick={handleCardClick}\n                onCardLike={handleCardLike}\n                onCardDelete={setCardForDeletion}\n                isUserDataReceived={isUserDataReceived}\n                component={Main} />\n            </Suspense>\n            <Footer />\n          </>\n        </Switch>\n        <InfoTooltip\n          isOpen={isStatusPopupOpen}\n          onClose={closeAllPopups}\n          popupStatusMessage={popupStatusMessage} />\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n          isSubmitting={isSubmitting} />\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n          isSubmitting={isSubmitting} />\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlace}\n          isSubmitting={isSubmitting} />\n        <ImagePopup\n          card={selectedCard}\n          onClose={closeAllPopups} />\n        <PopupConfirmDeletion\n          onClose={closeAllPopups}\n          handleCardDelete={handleCardDelete}\n          cardForDeletion={cardForDeletion}\n          isSubmitting={isSubmitting} />\n\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n\n// return (\n//   <CurrentUserContext.Provider value={currentUser}>\n//     <div className=\"page\">\n//       <Header\n//         onSignOut={handleSignOut}\n//         email={email} />\n//       <Switch>\n//         <Route path='/sign-up'>\n//           <Register\n//             onRegister={handleRegister}\n//             isSubmitting={isSubmitting.register}\n//             serverRequestStatus={popupStatusMessage.errorType} />\n//         </Route>\n//         <Route path='/sign-in'>\n//           <Login\n//             onLogin={handleLogin}\n//             isSubmitting={isSubmitting.login}\n//             serverRequestStatus={popupStatusMessage.errorType} />\n//         </Route>\n//         <>\n//           <ProtectedRoute\n//             path='/'\n//             loggedIn={loggedIn}\n//             cards={cards}\n//             onEditProfile={handleEditProfileClick}\n//             onAddPlace={handleAddPlaceClick}\n//             onEditAvatar={handleEditAvatarClick}\n//             onCardClick={handleCardClick}\n//             onCardLike={handleCardLike}\n//             onCardDelete={setCardForDeletion}\n//             isUserDataReceived={isUserDataReceived}\n//             component={Main} />\n//           <Route exact path='/'>\n//             <EditProfilePopup\n//               isOpen={isEditProfilePopupOpen}\n//               onClose={closeAllPopups}\n//               onUpdateUser={handleUpdateUser}\n//               isSubmitting={isSubmitting.profile} />\n//             <EditAvatarPopup\n//               isOpen={isEditAvatarPopupOpen}\n//               onClose={closeAllPopups}\n//               onUpdateAvatar={handleUpdateAvatar}\n//               isSubmitting={isSubmitting.avatar} />\n//             <AddPlacePopup\n//               isOpen={isAddPlacePopupOpen}\n//               onClose={closeAllPopups}\n//               onAddPlace={handleAddPlace}\n//               isSubmitting={isSubmitting.place} />\n//             <ImagePopup\n//               card={selectedCard}\n//               onClose={closeAllPopups} />\n//             <PopupConfirmDeletion\n//               onClose={closeAllPopups}\n//               handleCardDelete={handleCardDelete}\n//               cardForDeletion={cardForDeletion}\n//               isSubmitting={isSubmitting.deletion} />\n//             <Footer />\n//           </Route>\n//         </>\n//       </Switch>\n//       <InfoTooltip\n//         isOpen={isStatusPopupOpen}\n//         onClose={closeAllPopups}\n//         popupStatusMessage={popupStatusMessage} />\n//     </div>\n//   </CurrentUserContext.Provider>\n// );\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/react-mesto-auth\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}